-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.eventattendees
(
    eventid integer NOT NULL,
    userid integer NOT NULL,
    status character varying(50) COLLATE pg_catalog."default",
    rsvp_status character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT eventattendees_pkey PRIMARY KEY (eventid, userid)
);

CREATE TABLE IF NOT EXISTS public.eventcategories
(
    categoryid serial NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT eventcategories_pkey PRIMARY KEY (categoryid)
);

CREATE TABLE IF NOT EXISTS public.eventcategorymap
(
    eventid integer NOT NULL,
    categoryid integer NOT NULL,
    CONSTRAINT eventcategorymap_pkey PRIMARY KEY (eventid, categoryid)
);

CREATE TABLE IF NOT EXISTS public.eventratings
(
    eventid integer NOT NULL,
    userid integer NOT NULL,
    rating integer,
    comment text COLLATE pg_catalog."default",
    CONSTRAINT eventratings_pkey PRIMARY KEY (eventid, userid)
);

CREATE TABLE IF NOT EXISTS public.events
(
    eventid serial NOT NULL,
    title character varying(200) COLLATE pg_catalog."default" NOT NULL,
    venueid integer,
    start_time time without time zone,
    duration interval,
    end_time time without time zone,
    start_date date,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    is_all_day boolean DEFAULT false,
    status character varying(50) COLLATE pg_catalog."default",
    category_id integer,
    organizer_id integer,
    description text COLLATE pg_catalog."default",
    created_by integer,
    updated_by integer,
    average_rating numeric(3, 2),
    rsvp character varying(20) COLLATE pg_catalog."default",
    CONSTRAINT events_pkey PRIMARY KEY (eventid)
);

CREATE TABLE IF NOT EXISTS public.mediadocuments
(
    mediaid serial NOT NULL,
    eventid integer,
    file_path text COLLATE pg_catalog."default" NOT NULL,
    uploaded_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT mediadocuments_pkey PRIMARY KEY (mediaid)
);

CREATE TABLE IF NOT EXISTS public.notifications
(
    notificationid serial NOT NULL,
    eventid integer,
    userid integer,
    type character varying(50) COLLATE pg_catalog."default",
    message text COLLATE pg_catalog."default",
    sent_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT notifications_pkey PRIMARY KEY (notificationid)
);

CREATE TABLE IF NOT EXISTS public.savedreports
(
    reportid serial NOT NULL,
    userid integer,
    report_name character varying(150) COLLATE pg_catalog."default",
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    content text COLLATE pg_catalog."default",
    CONSTRAINT savedreports_pkey PRIMARY KEY (reportid)
);

CREATE TABLE IF NOT EXISTS public.users
(
    userid serial NOT NULL,
    username character varying(100) COLLATE pg_catalog."default" NOT NULL,
    password character varying(255) COLLATE pg_catalog."default" NOT NULL,
    first_name character varying(100) COLLATE pg_catalog."default",
    last_name character varying(100) COLLATE pg_catalog."default",
    major_department character varying(100) COLLATE pg_catalog."default",
    email character varying(255) COLLATE pg_catalog."default",
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    role character varying(50) COLLATE pg_catalog."default",
    phone_number character varying(20) COLLATE pg_catalog."default",
    hobbies text COLLATE pg_catalog."default",
    bio text COLLATE pg_catalog."default",
    profile_picture text COLLATE pg_catalog."default",
    CONSTRAINT users_pkey PRIMARY KEY (userid),
    CONSTRAINT users_email_key UNIQUE (email),
    CONSTRAINT users_username_key UNIQUE (username)
);

CREATE TABLE IF NOT EXISTS public.venues
(
    venueid serial NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    building character varying(100) COLLATE pg_catalog."default",
    room_number character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT venues_pkey PRIMARY KEY (venueid)
);

ALTER TABLE IF EXISTS public.eventattendees
    ADD CONSTRAINT eventattendees_eventid_fkey FOREIGN KEY (eventid)
    REFERENCES public.events (eventid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.eventattendees
    ADD CONSTRAINT eventattendees_userid_fkey FOREIGN KEY (userid)
    REFERENCES public.users (userid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.eventcategorymap
    ADD CONSTRAINT eventcategorymap_categoryid_fkey FOREIGN KEY (categoryid)
    REFERENCES public.eventcategories (categoryid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.eventcategorymap
    ADD CONSTRAINT eventcategorymap_eventid_fkey FOREIGN KEY (eventid)
    REFERENCES public.events (eventid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.eventratings
    ADD CONSTRAINT eventratings_eventid_fkey FOREIGN KEY (eventid)
    REFERENCES public.events (eventid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.eventratings
    ADD CONSTRAINT eventratings_userid_fkey FOREIGN KEY (userid)
    REFERENCES public.users (userid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.events
    ADD CONSTRAINT events_category_id_fkey FOREIGN KEY (category_id)
    REFERENCES public.eventcategories (categoryid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;


ALTER TABLE IF EXISTS public.events
    ADD CONSTRAINT events_created_by_fkey FOREIGN KEY (created_by)
    REFERENCES public.users (userid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;


ALTER TABLE IF EXISTS public.events
    ADD CONSTRAINT events_organizer_id_fkey FOREIGN KEY (organizer_id)
    REFERENCES public.users (userid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;


ALTER TABLE IF EXISTS public.events
    ADD CONSTRAINT events_updated_by_fkey FOREIGN KEY (updated_by)
    REFERENCES public.users (userid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;


ALTER TABLE IF EXISTS public.events
    ADD CONSTRAINT events_venueid_fkey FOREIGN KEY (venueid)
    REFERENCES public.venues (venueid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;


ALTER TABLE IF EXISTS public.mediadocuments
    ADD CONSTRAINT mediadocuments_eventid_fkey FOREIGN KEY (eventid)
    REFERENCES public.events (eventid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.notifications
    ADD CONSTRAINT notifications_eventid_fkey FOREIGN KEY (eventid)
    REFERENCES public.events (eventid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.notifications
    ADD CONSTRAINT notifications_userid_fkey FOREIGN KEY (userid)
    REFERENCES public.users (userid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.savedreports
    ADD CONSTRAINT savedreports_userid_fkey FOREIGN KEY (userid)
    REFERENCES public.users (userid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;

END;
